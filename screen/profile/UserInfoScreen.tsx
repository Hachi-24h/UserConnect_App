import { ArrowLeft2 } from 'iconsax-react-native';
import React, { useState } from 'react';
import {
  Alert,
  Dimensions,
  Image,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { launchImageLibrary } from 'react-native-image-picker';
import { useDispatch, useSelector } from 'react-redux';
import styles from '../../Css/UserInfoScreen';
import color from '../../Custom/Color';
import { updateUserInfo } from '../../utils/user';

const { width, height } = Dimensions.get('window');

const formatDate = (dob: string): string => {
  if (!dob || dob === 'Ch∆∞a c·∫≠p nh·∫≠t') {
    return 'Ch∆∞a c·∫≠p nh·∫≠t';
  }
  const date = new Date(dob);
  if (isNaN(date.getTime())) {
    return 'Ch∆∞a c·∫≠p nh·∫≠t';
  }
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
};

const UserInfoScreen = ({ navigation }: any) => {
  const userDetail = useSelector((state: any) => state.userDetail.info); // userDetail.info = { userId, avatar, backgroundAvatar, ... }
  const name_user = useSelector((state: any) => state.user); // user._id = userId
  const dispatch = useDispatch();

  const [editMode, setEditMode] = useState(false);
  const [avatar, setAvatar] = useState(userDetail?.avatar);
  const [backgroundAvatar, setBackgroundAvatar] = useState(
    userDetail?.backgroundAvatar,
  );
  const [firstname, setFirstname] = useState(userDetail?.firstname || '');
  const [lastname, setLastname] = useState(userDetail?.lastname || '');
  const [gender, setGender] = useState(userDetail?.gender || '');
  const [dob, setDob] = useState(userDetail?.DOB || '');
  const [phoneNumber] = useState(userDetail?.phoneNumber || 'Ch∆∞a c·∫≠p nh·∫≠t'); // kh√¥ng cho s·ª≠a
  const [email, setEmail] = useState(userDetail?.email || '');
  const [address, setAddress] = useState(userDetail?.address || '');
  const [bio, setBio] = useState(userDetail?.bio || '');

  const pickImage = async (setFunc: any, setPreview: any) => {
    const result = await launchImageLibrary({
      mediaType: 'photo',
      includeBase64: true,
    });
    if (result.assets && result.assets.length > 0) {
      const asset = result.assets[0];
      const uri = asset.uri;
      const base64 = asset.base64;
      const base64String = `data:${asset.type};base64,${base64}`;
      setPreview(uri);
      setFunc(base64String);
    }
  };

  const handleSave = async () => {
    try {
      const userId = userDetail?.userId; // ‚úÖ ch√≠nh x√°c: g·ª≠i userId ƒë∆∞·ª£c backend d√πng ƒë·ªÉ t√¨m
      console.log('üì§ G·ª≠i userId:', userId);
      const data = {
        avatar,
        backgroundAvatar,
        firstname,
        lastname,
        gender,
        DOB: dob,
        phoneNumber,
        email,
        address,
        bio,
      };
      console.log('üì§ G·ª≠i d·ªØ li·ªáu:', data);

      const res = await updateUserInfo(userId, data);
      console.log('L∆∞u th√†nh c√¥ng:', res);

      // Th√¥ng b√°o khi l∆∞u th√†nh c√¥ng
      Alert.alert(
        'L∆∞u th√†nh c√¥ng',
        'Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t, ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ c√≥ hi·ªáu l·ª±c.',
      );

      // Load l·∫°i d·ªØ li·ªáu (c√≥ th·ªÉ dispatch l·∫°i action n·∫øu b·∫°n s·ª≠ d·ª•ng Redux)
      dispatch({
        type: 'UPDATE_USER_DETAIL',
        payload: {
          avatar,
          backgroundAvatar,
          firstname,
          lastname,
          gender,
          dob,
          phoneNumber,
          email,
          address,
          bio,
        },
      });

      setEditMode(false);
    } catch (error) {
      console.log('‚ùå L·ªói khi c·∫≠p nh·∫≠t:', error);
      Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin.');
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <ArrowLeft2 size={24} color={color.white} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Th√¥ng tin c√° nh√¢n</Text>
      </View>

      <ScrollView contentContainerStyle={{ paddingBottom: 40 }}>
        <TouchableOpacity
          disabled={!editMode}
          onPress={() => pickImage(setBackgroundAvatar, setBackgroundAvatar)}>
          <Image source={{ uri: backgroundAvatar }} style={styles.coverImage} />
        </TouchableOpacity>

        <View style={styles.avatarContainer}>
          <TouchableOpacity
            disabled={!editMode}
            onPress={() => pickImage(setAvatar, setAvatar)}>
            <Image
              source={{
                uri:
                  avatar ||
                  'https://i.postimg.cc/6pXNwv51/backgrond-mac-dinh.jpg',
              }}
              style={styles.avatar}
            />
          </TouchableOpacity>
          <Text style={styles.name}>{`${firstname} ${lastname}`}</Text>
        </View>

        <View style={styles.infoSection}>
          <Text style={styles.label}>H·ªç</Text>
          <TextInput
            editable={editMode}
            value={firstname}
            onChangeText={setFirstname}
            style={styles.value}
            placeholder="H·ªç"
            placeholderTextColor="#999"
          />

          <Text style={styles.label}>T√™n</Text>
          <TextInput
            editable={editMode}
            value={lastname}
            onChangeText={setLastname}
            style={styles.value}
            placeholder="T√™n"
            placeholderTextColor="#999"
          />

          <Text style={styles.label}>Gi·ªõi t√≠nh</Text>
          <TextInput
            editable={editMode}
            value={gender}
            onChangeText={setGender}
            style={styles.value}
            placeholder="Nam/N·ªØ/Kh√°c"
            placeholderTextColor="#999"
          />

          <Text style={styles.label}>Ng√†y sinh</Text>
          <TextInput
            editable={false} // Kh√¥ng cho ph√©p s·ª≠a ƒë·ªïi
            value={editMode ? dob : formatDate(dob)} // N·∫øu editMode b·∫≠t th√¨ v·∫´n gi·ªØ ng√†y sinh d∆∞·ªõi d·∫°ng text
            style={styles.value}
            placeholder="yyyy-mm-dd"
            placeholderTextColor="#999"
          />

          <Text style={styles.label}>Email</Text>
          <TextInput
            editable={editMode}
            value={email}
            onChangeText={setEmail}
            style={styles.value}
            placeholder="email@example.com"
            placeholderTextColor="#999"
          />

          <Text style={styles.label}>ƒê·ªãa ch·ªâ</Text>
          <TextInput
            editable={editMode}
            value={address}
            onChangeText={setAddress}
            style={styles.value}
            placeholder="S·ªë nh√†, ƒë∆∞·ªùng, th√†nh ph·ªë..."
            placeholderTextColor="#999"
          />

          <Text style={styles.label}>Gi·ªõi thi·ªáu</Text>
          <TextInput
            editable={editMode}
            value={bio}
            onChangeText={setBio}
            multiline
            numberOfLines={4}
            style={[styles.value, { height: 100, textAlignVertical: 'top' }]}
            placeholder="M·ªôt ch√∫t v·ªÅ b·∫°n..."
            placeholderTextColor="#999"
          />

          <Text style={styles.label}>ƒêi·ªán tho·∫°i</Text>
          <Text style={styles.value}>{phoneNumber}</Text>
          <Text style={styles.note}>
            S·ªë ƒëi·ªán tho·∫°i ch·ªâ hi·ªÉn th·ªã v·ªõi ng∆∞·ªùi c√≥ l∆∞u s·ªë b·∫°n trong danh b·∫° m√°y
          </Text>
        </View>

        {editMode ? (
          <TouchableOpacity style={styles.button} onPress={handleSave}>
            <Text style={styles.buttonText}>L∆∞u thay ƒë·ªïi</Text>
          </TouchableOpacity>
        ) : (
          <TouchableOpacity
            style={styles.button}
            onPress={() => setEditMode(true)}>
            <Text style={styles.buttonText}>Ch·ªânh s·ª≠a th√¥ng tin</Text>
          </TouchableOpacity>
        )}
      </ScrollView>
    </View>
  );
};

export default UserInfoScreen;
